package main

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"regexp"
	"strconv"
)

func main() {
	result := 0

	number_dict := map[string]string{
		"one":   "1",
		"two":   "2",
		"three": "3",
		"four":  "4",
		"five":  "5",
		"six":   "6",
		"seven": "7",
		"eight": "8",
		"nine":  "9",
	}

	// number_strings := []string{"one", "two", "three", "four", "five", "six", "seven", "eight", "nine" }

	file, err := os.Open("./inputtest.txt")
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)
	// optionally, resize scanner's capacity for lines over 64K, see next example
	for scanner.Scan() {
		line := scanner.Text()
		re := regexp.MustCompile("[1-9]|one|two|three|four|five|six|seven|eight|nine")
		number_list := re.FindAllString(line, -1)

		// fmt.Println(number_list)

		first_number := number_list[0]

		val, ok := number_dict[first_number]
		if ok {
			first_number = val
			// fmt.Println(first_number)
		}

		var rev []string
		for _, n := range number_list {
			rev = append([]string{n}, rev...)
		}

		last_number := rev[0]

		val, ok = number_dict[last_number]
		if ok {
			last_number = val
			// fmt.Println(first_number)
		}

		combined_numbers, _ := strconv.Atoi(first_number + last_number)

		result += combined_numbers

		fmt.Println("number list is:", number_list)
		fmt.Println("first digit:", first_number)
		fmt.Println("last digit:", last_number)
	}

	fmt.Println(result)

	if err := scanner.Err(); err != nil {
		log.Fatal(err)
	}
}
